First and foremost, this process will change over time. The process should serve us and we should not become attached to things that don't move us forward efficiently.

## Sprint Process
Our sprints ideally last two weeks followed by one week of bug fixes and a release cycle. If no release is planned, we may handle additional items in the off-week.


### Sprint Planning

A Monday meeting that kicks off a new sprint. This meeting lasts a half day or less. The agenda:

* **Product Vision**: A quick reminder of the vision we have for where the product is heading, so everyone sees the importance (or non-importance) of features we are working on.
* **Feature Explanation**: The product manager shares the next feature(s) with the team, pitching its attributes, sharing any process flows or design concepts with the team.
* **Q+A**: The development team may ask any clarifying questions or request further detail on any aspect of the feature. Please take notes.
* **Task Writing**: The development team and product manager write additional stories, tasks or acceptance criteria to further break down the feature. This becomes the detail within each Pivotal Tracker story.
* **Estimation**: The development team estimates the difficulty of each story based upon their planning.
* **Responsibilities**: Each developer assumes responsibility for a number of stories in the backlog until their personal velocity is met.
* **Sprint Goal**: The team assesses the stories committed to in the sprint and determines a goal for the sprint itself. _We tell this to the team at large when asked what we're working on this sprint._

_**Note:** if a given feature is small enough that there are not enough story points to fill a sprint, the team may either select another feature to digest or select old bugs / chores to fill up their sprint._

###### **To discuss:** Moving to a Fibonacci scale, which gives additional granularity around estimates but may not be worth the effort.

### Sprint Dailies

A daily scrum to check-in on progress. Share what's being worked on, what roadblocks exist, and your certainty towards achieving your responsibilities by the sprint's end.

If the team feels an issue has arisen that may endanger the sprint from being completed successfully, we should pause work and assess what can be done to achieve our Sprint Goal. Similarly, work may be paused due to an **expedited issue** coming to light.

### Sprint Review

A bi-weekly meeting held at the end of each sprint. This should be an hour or so. This should also include any relevant stakeholders from the LifeVest team at large. The agenda:

* **Demonstrate** any new features or functionality achieved during the sprint.
* **Field questions** from the team at large about the functionality.
* **Measure success** against the Sprint Goal by the team at large.
* **Agree on a release plan** for the following week: does what we reviewed get released next week? If not, let's address the next sprint's priorities.

### Sprint Retrospective

A bi-weekly meeting held Friday afternoon at the end of the sprint. This should be an hour or so, preferably with alcohol. This should _just_ be the product manager and the development team. The agenda:

* **Successes**: What has made this sprint successful? 
* **Less Than Successful**:  What has made it less than successful? 
* **A-Ha** moments you experienced during the sprint
* **Appreciations** to the team
* **Hindrances**: What hindered the sprint? 
* **Processes** we could change for the future
* **Hypothesis** What should we try next time?

### Release Process
This is an ideal process. We can be flexible to the given day of a release but releases should typically not happen on a Friday due to possible issues that may arise over the weekend.

1. **Monday:** At the end of each sprint, Mike C and the team should review the accepted stories and discuss what could be deployed to production. Any bugs that arise should be accounted for with a plan to complete that week (or saved for future sprints).
2. **Tuesday:** Release notes should be written that can be communicated to the team at large. These should be distributed to the team so they may test on staging and prepare for…
3. **Wednesday:** Jon Arnold will meet with the user-facing team (Comms, Ops, Sales, Marketing forum) to discuss the upcoming release and address any questions.
4. **Thursday:** Pending no further issues or bugs from the team, the release is deployed to production and the Comms team notifies users of any relevant changes.
5. **Friday:** Any production bugs are addressed and new feedback is folded into the next sprint.

## Sprint Glossary

### Estimation

Currently we use a 1-4 scale rating system. 1 is an easy task that can be accomplished in less than a day. 4 is incredibly difficult and most likely needs additional clarity before work can be done. Most stories in Pivotal should be labeled a 1 or 2 difficulty to indicate they are granular enough to be worked on. If the team is unsure of the size of the task, additional planning should be done around it before an estimate is given.

### Velocity

Velocity is ultimately set by the amount of work a developer can get done inside the context of one sprint. This number should be formulated by previous history where possible, but any developer is allowed, within reason, to accept responsibility for any number of items they choose in the Backlog.

A developer's velocity should save 80% of their workday for new features and 20% for bugs or chores inside a sprint.

This number is also given based upon the _ideal workday_, which is a day mostly free of meetings and significant email or non-development responsibilities. 

### Expediting

We do reserve the right to allow a high priority issue (a client deliverable, a production level bug, etc) to be **expedited** through our system. This is effectively pulling the brake line on everything in this process to allow a single, hot item to flow through our work stream. Every developer should pause work on their current task and rally to see how they can help address the urgent issue that arises.

This causes the current sprint to effectively pause and we restart it once the issue is resolved. This is an emergency measure and should be only used when the team agrees the scenario calls for it.

## Podio Guidelines

We use the [Product Roadmap](https://podio.com/lifevesthealthcom/product-roadmap) workspace to hold all ideas and features that aren't yet ready for active work. We use a rough Kanban style board to quickly show the status of each idea and feature. A brief rundown:

### Ideas

The [Ideas board](https://podio.com/lifevesthealthcom/product-roadmap/apps/ideas) is used for any idea that comes to our team's mind. Anything can be thrown here and it stays out of the way of our active work cycle. This board is reviewed weekly to move things forward into active ideation and onto the roadmap. Also, these boards show a top-to-bottom priority, with most important on the top. The flow:

* **New Idea**: Any idea the team has, large or small.
* **Ready for Ideation**: The idea has been validated as a need and moved into our ideation process queue.
* **Ready for Roadmap**: An ideation process has occurred and the idea now has a component set of features, drawings, etc.
* **On Roadmap**: A 1:1 with our [Roadmap board](https://podio.com/lifevesthealthcom/product-roadmap/apps/kanban) to show active development progress.
* **Completed**: Implemented ideas.

### Kanban Roadmap

The [Roadmap board](https://podio.com/lifevesthealthcom/product-roadmap/apps/kanban) shows all items on their way to sprint planning and deelopment. As features become planned out, we maintain a 1:1 here with Pivotal Tracker epics so the tasks and stories are easy to see.

* **Incoming Idea**: A planned idea from the Ideas board.
* **Requirements Gathering**: An audit and documentation process of the current feature. Adding stories, workflows or designs to the feature.
* **Sprint Candidate**: A valid pool of features that may be used for sprint planning.
* **In Current Sprint**: All the features we are currently working on.
* **Shipped - Staging**: All items that are currently complete but not released.
* **Shipped – Production**: All items that are now live on the application (and with a released date).
* **On Hold**: Should we encounter a roadblock or snag, we move items to On Hold until they're ready to work on.

## Pivotal Tracker Guidelines

[Pivotal Tracker Getting Started Guide](https://www.pivotaltracker.com/help/gettingstarted)

A high level guide:

1. PM prioritizes stories in Backlog.
2. Team discusses and collectively estimates each story.
3. Developers start next available story in Current or Backlog.
4. Developers check in code to finish story.
5. Team pushes code for new feature to demo/test environment, and delivers stories.
6. PM accepts or rejects story (the feedback loop).

Visualized here:

![LV Pivotal Flow](http://f.cl.ly/items/3d1f2h1b3K2f3g3f133u/pivotal%20flow.png)

### Pivotal Tracker Etiquette

1. Assign yourself to things you're working on.
2. Use a separate branch for each story you're working on.
3. Comment on items when you hit a stopping point, roadblock, or have a question.
4. Use the Pivotal ID/link in Slack to reference what you're working on.
5. Attach screenshots to your comments when possible.
6. Use @ commenting to tag others so they see your notes.
7. Ideally, Jon Arnold cleans the Pivotal backlog and new items come in only from him